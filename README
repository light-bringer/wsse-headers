Our API requires WSSE headers to communicate with the server. We presently have generators written in Java, PHP, C# and JavaScript. All produce the same output. We now want to add Python to the list.

What we want out of this project:

1- A code library that customers can integrate into their own projects

2- Unit tests to confirm the code is working as expected

3- Documentation explaining how the code works

The following information is needed to generate a WSSE header:

1- The name of the customer as it appears in the software;

2- A nonce, which is a random string generated by you. This string must be different with each request;

The current date & time in UTC-0. See https://www.timeanddate.com/time/zones/ for more information;

3- Username – Your username;

4- API token – A unique token assigned to you by us.

The following PHP script demonstrates how to generate a WSSE header. This code can be easily tested using PhpFiddle (http://phpfiddle.org).

=== PHP EXAMPLE ===

<?php

$orgName = "YOUR_ORGANZATION";

$username = "YOUR_USERNAME";

$token = "YOUR_TOKEN";

$key = md5($username);

$cryptAlgo = 'AES-256-CFB';

$iv = mb_substr(base64_decode($token), 0, 16, '8bit');

$secret = base64_encode($iv.openssl_encrypt($token, $cryptAlgo, $key, 0, $iv));

date_default_timezone_set('UTC');

$current_time = date('c');

$nonce = md5(rand(), true);

$base64_nonce = base64_encode($nonce);

$password_digest = base64_encode(sha1($nonce . $current_time . $secret, true));

$header = "UsernameToken Username=\"$username\",".

"PasswordDigest=\"$password_digest\",".

"Nonce=\"$base64_nonce\",".

"Created=\"$current_time\",".

"Organization=\"$orgName\"";

echo $header;

?>

=== PHP EXAMPLE : END ===

The following Javascript script demonstrates how to generate a WSSE header. This code can be easily tested using Postman (http://www.getpostman.com).

=== JAVASCRIPT SAMPLE ===

var moment = require('moment');

var username = "YOUR_USERNAME",

orgName = "YOUR_ORGANZATION",

token = "YOUR_TOKEN",

key = CryptoJS.MD5(username).toString(),

iv = atob(token).substring(0, 16).toString(CryptoJS.enc.Utf8),

encrypted,

secret,

created,

nonce,

base64Nonce,

passwordDigest,

utf8iv = CryptoJS.enc.Utf8.parse(iv),

utf8key = CryptoJS.enc.Utf8.parse(key),

utf8token = CryptoJS.enc.Utf8.parse(token);

encrypted = CryptoJS.AES.encrypt(utf8token, utf8key, {

iv: utf8iv,

mode: CryptoJS.mode.CFB,

padding: CryptoJS.pad.NoPadding

});

secret = btoa(iv + encrypted);

created = moment().utc().format();

created = created.substr(0, created.length - 1) + '+00:00';

nonce = Math.random() * 32767 + '0';

nonce = CryptoJS.MD5(nonce).toString();

var stringToSha1 = nonce + created + secret;

var sha1Temp = CryptoJS.SHA1(stringToSha1, {

asBytes: true

});

base64Nonce = btoa(nonce);

passwordDigest = CryptoJS.enc.Base64.stringify(sha1Temp);

header = `UsernameToken Username="${username}",PasswordDigest="${passwordDigest}", Nonce="${base64Nonce}", Created="${created}", Organization="${orgName}"`;

=== JAVASCRIPT SAMPLE : END ===